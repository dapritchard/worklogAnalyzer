% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worklogs-filter-name.R
\name{filter_name}
\alias{filter_name}
\alias{filter_name_keep}
\alias{filter_name_keep,worklogs_node-method}
\title{Filter worklogs by name}
\usage{
filter_name_keep(wkls, pattern, type, exclude, prune_empty, ...)

\S4method{filter_name_keep}{worklogs_node}(
  wkls,
  pattern = character(0L),
  type = "leafs",
  exclude = character(0L),
  prune_empty = TRUE,
  ...
)
}
\arguments{
\item{wkls}{A \code{worklogs} object.}

\item{pattern}{A character vector of regular expressions that will be used to
match against the \code{worklogs_node} and \code{worklog_leaf} names.}

\item{type}{One of either \code{"leafs"}, \code{"nodes"}, or \code{"both"} specifying which
types of elements in the worklogs tree to perform matching upon.}

\item{exclude}{A character vector of regular expressions that will be used to
match against the \code{worklogs_node} and \code{worklog_leaf} names.}

\item{prune_empty}{Either \code{TRUE} or \code{FALSE} specifying whether to prune any
subtrees that don't contain worklogs in them after filtering.}

\item{...}{Arguments that are passed on to \link[base:grep]{base::grepl} to be used for
regular expression matching with \code{pattern} and \code{exclude}.}
}
\description{
Filter the elements of a worklog tree by name. For \code{filter_name_keep}, all
worklog tree elements of the appropriate type with names that are matched by
any of the elements of \code{pattern} are kept, minus any worklog tree elements
with names that are matched by any of the elements of \code{exclude}. Subtrees
that don't contain any worklogs after filtering can optionally be pruned from
the tree.
}
\details{
All worklog tree elements (i.e. nodes and leafs) have an associated name,
with the exception of the top level. \code{filter_name_keep} provides the ability
to filter elements of the worklog tree based on their names and types.

\code{filter_name_keep} performs filtering by walking the worklog tree. For a
given subtree in the tree, children nodes and children leafs are treated
differentially according to the input to the \code{type} argument, as described in
the following section.
}
\section{Filtering algorithm}{

\itemize{
\item If \code{type} is \code{"nodes"}:
\itemize{
\item For a node: when a node name is matched then include the entire subtree
rooted by the node; otherwise recurse into the node and perform filtering
on the node children.
\item For a leaf: the leaf is discarded
}
\item If \code{type} is \code{"both"}:
\itemize{
\item For a node: when a node name is matched then include the entire subtree
rooted by the node; otherwise recurse into the node and perform filtering
on the node children.
\item For a leaf: keep the leaf if the name is a match, otherwise the leaf is
discarded.
}
\item If \code{type} is \code{"leaf"}:
\itemize{
\item For a node: recurse into the node and perform filtering on the node
children.
\item For a leaf:  keep the leaf if the name is a match, otherwise the leaf is
discarded.
}
}
}

\section{Regular expression pattern matching}{


When performing filtering, for a given input and tree node element the names
of the node children are matched against the regular expressions provided for
the \code{pattern} and \code{exclude} arguments.

Regular expression pattern matching works the same for the input to \code{pattern}
as for \code{exclude} as follows. For each worklog child name of the relevant type
(as determined by the input to the \code{type} argument), if any of the regular
expressions provided as elements of the argument input character vector match
the worklog child name then that worklog child is marked as being included or
excluded, as appropriate.

Regular expression pattern matching is performed by the \link[base:grep]{base::grepl}
function. You can use \code{...} to provide arguments that will be passed on to
\code{grepl}.
}

